# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bench/BenchMotorControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BenchMotorControl(genpy.Message):
  _md5sum = "8ad18a25d3f99a657d5431e717084b05"
  _type = "bench/BenchMotorControl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 flex_myobrick_pwm
float32 extend_myobrick_pwm

bool flex_myobrick_start
bool extend_myobrick_start

bool reset_kill_switch
bool press_kill_switch"""
  __slots__ = ['flex_myobrick_pwm','extend_myobrick_pwm','flex_myobrick_start','extend_myobrick_start','reset_kill_switch','press_kill_switch']
  _slot_types = ['float32','float32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flex_myobrick_pwm,extend_myobrick_pwm,flex_myobrick_start,extend_myobrick_start,reset_kill_switch,press_kill_switch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BenchMotorControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.flex_myobrick_pwm is None:
        self.flex_myobrick_pwm = 0.
      if self.extend_myobrick_pwm is None:
        self.extend_myobrick_pwm = 0.
      if self.flex_myobrick_start is None:
        self.flex_myobrick_start = False
      if self.extend_myobrick_start is None:
        self.extend_myobrick_start = False
      if self.reset_kill_switch is None:
        self.reset_kill_switch = False
      if self.press_kill_switch is None:
        self.press_kill_switch = False
    else:
      self.flex_myobrick_pwm = 0.
      self.extend_myobrick_pwm = 0.
      self.flex_myobrick_start = False
      self.extend_myobrick_start = False
      self.reset_kill_switch = False
      self.press_kill_switch = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.flex_myobrick_pwm, _x.extend_myobrick_pwm, _x.flex_myobrick_start, _x.extend_myobrick_start, _x.reset_kill_switch, _x.press_kill_switch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.flex_myobrick_pwm, _x.extend_myobrick_pwm, _x.flex_myobrick_start, _x.extend_myobrick_start, _x.reset_kill_switch, _x.press_kill_switch,) = _get_struct_2f4B().unpack(str[start:end])
      self.flex_myobrick_start = bool(self.flex_myobrick_start)
      self.extend_myobrick_start = bool(self.extend_myobrick_start)
      self.reset_kill_switch = bool(self.reset_kill_switch)
      self.press_kill_switch = bool(self.press_kill_switch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.flex_myobrick_pwm, _x.extend_myobrick_pwm, _x.flex_myobrick_start, _x.extend_myobrick_start, _x.reset_kill_switch, _x.press_kill_switch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.flex_myobrick_pwm, _x.extend_myobrick_pwm, _x.flex_myobrick_start, _x.extend_myobrick_start, _x.reset_kill_switch, _x.press_kill_switch,) = _get_struct_2f4B().unpack(str[start:end])
      self.flex_myobrick_start = bool(self.flex_myobrick_start)
      self.extend_myobrick_start = bool(self.extend_myobrick_start)
      self.reset_kill_switch = bool(self.reset_kill_switch)
      self.press_kill_switch = bool(self.press_kill_switch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f4B = None
def _get_struct_2f4B():
    global _struct_2f4B
    if _struct_2f4B is None:
        _struct_2f4B = struct.Struct("<2f4B")
    return _struct_2f4B
