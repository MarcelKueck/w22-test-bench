// Generated by gencpp from file bench/BenchState.msg
// DO NOT EDIT!


#ifndef BENCH_MESSAGE_BENCHSTATE_H
#define BENCH_MESSAGE_BENCHSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bench
{
template <class ContainerAllocator>
struct BenchState_
{
  typedef BenchState_<ContainerAllocator> Type;

  BenchState_()
    : angle(0.0)
    , safety_switch_pressed(false)
    , flex_myobrick_pos_encoder(0.0)
    , flex_myobrick_torque_encoder(0.0)
    , flex_myobrick_current(0.0)
    , flex_myobrick_pwm(0.0)
    , flex_myobrick_in_running_state(false)
    , extend_myobrick_pos_encoder(0.0)
    , extend_myobrick_torque_encoder(0.0)
    , extend_myobrick_current(0.0)
    , extend_myobrick_pwm(0.0)
    , extend_myobrick_in_running_state(false)  {
    }
  BenchState_(const ContainerAllocator& _alloc)
    : angle(0.0)
    , safety_switch_pressed(false)
    , flex_myobrick_pos_encoder(0.0)
    , flex_myobrick_torque_encoder(0.0)
    , flex_myobrick_current(0.0)
    , flex_myobrick_pwm(0.0)
    , flex_myobrick_in_running_state(false)
    , extend_myobrick_pos_encoder(0.0)
    , extend_myobrick_torque_encoder(0.0)
    , extend_myobrick_current(0.0)
    , extend_myobrick_pwm(0.0)
    , extend_myobrick_in_running_state(false)  {
  (void)_alloc;
    }



   typedef float _angle_type;
  _angle_type angle;

   typedef uint8_t _safety_switch_pressed_type;
  _safety_switch_pressed_type safety_switch_pressed;

   typedef float _flex_myobrick_pos_encoder_type;
  _flex_myobrick_pos_encoder_type flex_myobrick_pos_encoder;

   typedef float _flex_myobrick_torque_encoder_type;
  _flex_myobrick_torque_encoder_type flex_myobrick_torque_encoder;

   typedef float _flex_myobrick_current_type;
  _flex_myobrick_current_type flex_myobrick_current;

   typedef float _flex_myobrick_pwm_type;
  _flex_myobrick_pwm_type flex_myobrick_pwm;

   typedef uint8_t _flex_myobrick_in_running_state_type;
  _flex_myobrick_in_running_state_type flex_myobrick_in_running_state;

   typedef float _extend_myobrick_pos_encoder_type;
  _extend_myobrick_pos_encoder_type extend_myobrick_pos_encoder;

   typedef float _extend_myobrick_torque_encoder_type;
  _extend_myobrick_torque_encoder_type extend_myobrick_torque_encoder;

   typedef float _extend_myobrick_current_type;
  _extend_myobrick_current_type extend_myobrick_current;

   typedef float _extend_myobrick_pwm_type;
  _extend_myobrick_pwm_type extend_myobrick_pwm;

   typedef uint8_t _extend_myobrick_in_running_state_type;
  _extend_myobrick_in_running_state_type extend_myobrick_in_running_state;





  typedef boost::shared_ptr< ::bench::BenchState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bench::BenchState_<ContainerAllocator> const> ConstPtr;

}; // struct BenchState_

typedef ::bench::BenchState_<std::allocator<void> > BenchState;

typedef boost::shared_ptr< ::bench::BenchState > BenchStatePtr;
typedef boost::shared_ptr< ::bench::BenchState const> BenchStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bench::BenchState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bench::BenchState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bench::BenchState_<ContainerAllocator1> & lhs, const ::bench::BenchState_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.safety_switch_pressed == rhs.safety_switch_pressed &&
    lhs.flex_myobrick_pos_encoder == rhs.flex_myobrick_pos_encoder &&
    lhs.flex_myobrick_torque_encoder == rhs.flex_myobrick_torque_encoder &&
    lhs.flex_myobrick_current == rhs.flex_myobrick_current &&
    lhs.flex_myobrick_pwm == rhs.flex_myobrick_pwm &&
    lhs.flex_myobrick_in_running_state == rhs.flex_myobrick_in_running_state &&
    lhs.extend_myobrick_pos_encoder == rhs.extend_myobrick_pos_encoder &&
    lhs.extend_myobrick_torque_encoder == rhs.extend_myobrick_torque_encoder &&
    lhs.extend_myobrick_current == rhs.extend_myobrick_current &&
    lhs.extend_myobrick_pwm == rhs.extend_myobrick_pwm &&
    lhs.extend_myobrick_in_running_state == rhs.extend_myobrick_in_running_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bench::BenchState_<ContainerAllocator1> & lhs, const ::bench::BenchState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bench

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bench::BenchState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bench::BenchState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bench::BenchState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bench::BenchState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bench::BenchState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bench::BenchState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bench::BenchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e6318cc4849f33a839d0d132a6048f8";
  }

  static const char* value(const ::bench::BenchState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e6318cc4849f33aULL;
  static const uint64_t static_value2 = 0x839d0d132a6048f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::bench::BenchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bench/BenchState";
  }

  static const char* value(const ::bench::BenchState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bench::BenchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle\n"
"\n"
"bool safety_switch_pressed\n"
"\n"
"float32 flex_myobrick_pos_encoder\n"
"float32 flex_myobrick_torque_encoder\n"
"float32 flex_myobrick_current\n"
"float32 flex_myobrick_pwm\n"
"bool flex_myobrick_in_running_state\n"
"\n"
"float32 extend_myobrick_pos_encoder\n"
"float32 extend_myobrick_torque_encoder\n"
"float32 extend_myobrick_current\n"
"float32 extend_myobrick_pwm\n"
"bool extend_myobrick_in_running_state\n"
"\n"
;
  }

  static const char* value(const ::bench::BenchState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bench::BenchState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.safety_switch_pressed);
      stream.next(m.flex_myobrick_pos_encoder);
      stream.next(m.flex_myobrick_torque_encoder);
      stream.next(m.flex_myobrick_current);
      stream.next(m.flex_myobrick_pwm);
      stream.next(m.flex_myobrick_in_running_state);
      stream.next(m.extend_myobrick_pos_encoder);
      stream.next(m.extend_myobrick_torque_encoder);
      stream.next(m.extend_myobrick_current);
      stream.next(m.extend_myobrick_pwm);
      stream.next(m.extend_myobrick_in_running_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BenchState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bench::BenchState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bench::BenchState_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "safety_switch_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safety_switch_pressed);
    s << indent << "flex_myobrick_pos_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.flex_myobrick_pos_encoder);
    s << indent << "flex_myobrick_torque_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.flex_myobrick_torque_encoder);
    s << indent << "flex_myobrick_current: ";
    Printer<float>::stream(s, indent + "  ", v.flex_myobrick_current);
    s << indent << "flex_myobrick_pwm: ";
    Printer<float>::stream(s, indent + "  ", v.flex_myobrick_pwm);
    s << indent << "flex_myobrick_in_running_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flex_myobrick_in_running_state);
    s << indent << "extend_myobrick_pos_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.extend_myobrick_pos_encoder);
    s << indent << "extend_myobrick_torque_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.extend_myobrick_torque_encoder);
    s << indent << "extend_myobrick_current: ";
    Printer<float>::stream(s, indent + "  ", v.extend_myobrick_current);
    s << indent << "extend_myobrick_pwm: ";
    Printer<float>::stream(s, indent + "  ", v.extend_myobrick_pwm);
    s << indent << "extend_myobrick_in_running_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extend_myobrick_in_running_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BENCH_MESSAGE_BENCHSTATE_H
